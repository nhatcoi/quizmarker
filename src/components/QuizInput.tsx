import React, { useState } from 'react';
import { Question, QuizMode } from '../types/Quiz';
import { parseQuizText } from '../utils/quizParser';
import { formatTextWithGemini } from '../services/geminiService';

interface QuizInputProps {
  onQuizCreated: (questions: Question[], mode: QuizMode) => void;
}

const QuizInput: React.FC<QuizInputProps> = ({ onQuizCreated }) => {
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isFormatting, setIsFormatting] = useState(false);
  const [selectedMode, setSelectedMode] = useState<QuizMode>('test');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      const questions = parseQuizText(inputText);
      if (questions.length === 0) {
        alert('Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi t·ª´ text n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i format.');
        return;
      }
      
      onQuizCreated(questions, selectedMode);
    } catch (error) {
      alert('C√≥ l·ªói x·∫£y ra khi parse c√¢u h·ªèi. Vui l√≤ng ki·ªÉm tra l·∫°i format.');
      console.error('Parse error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFormatText = async () => {
    if (!inputText.trim()) {
      alert('Vui l√≤ng nh·∫≠p text tr∆∞·ªõc khi format.');
      return;
    }

    setIsFormatting(true);
    
    try {
      const formattedText = await formatTextWithGemini(inputText);
      setInputText(formattedText);
    } catch (error) {
      alert(error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi format text.');
      console.error('Format error:', error);
    } finally {
      setIsFormatting(false);
    }
  };

  const sampleText = `L·ª£i √≠ch n√†o c·ªßa AWS Cloud h·ªó tr·ª£ vi·ªác kh·ªõp cung c·∫•p t√†i nguy√™n v·ªõi nhu c·∫ßu kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác thay ƒë·ªïi?
A. T√≠nh kh·∫£ d·ª•ng cao.
B. Ph·∫°m vi to√†n c·∫ßu.
C. T√≠nh ƒë√†n h·ªìi (Elasticity).
D. Chi ph√≠ bi·∫øn ƒë·ªïi th·∫•p h∆°n do quy m√¥ kinh t·∫ø kh·ªïng l·ªì.
ƒê√°p √°n ƒë√∫ng: C

T√≠nh ƒë√†n h·ªìi c·ªßa AWS Cloud gi√∫p kh√°ch h√†ng ti·∫øt ki·ªám chi ph√≠ so v·ªõi c√°c nh√† cung c·∫•p d·ªãch v·ª• l∆∞u tr·ªØ truy·ªÅn th·ªëng. Kh√°ch h√†ng AWS c√≥ th·ªÉ l√†m g√¨ ƒë·ªÉ h∆∞·ªüng l·ª£i t·ª´ t√≠nh ƒë√†n h·ªìi c·ªßa AWS Cloud? (Ch·ªçn HAI)
A. Tri·ªÉn khai t√†i nguy√™n c·ªßa b·∫°n tr√™n nhi·ªÅu V√πng s·∫µn s√†ng.
B. S·ª≠ d·ª•ng Amazon EC2 Auto Scaling.
C. Tri·ªÉn khai t√†i nguy√™n c·ªßa b·∫°n trong m·ªôt khu v·ª±c kh√°c.
D. S·ª≠ d·ª•ng c√¢n b·∫±ng t·∫£i Elastic.
E. S·ª≠ d·ª•ng ƒêi·ªán to√°n phi m√°y ch·ªß (Serverless Computing) b·∫•t c·ª© khi n√†o c√≥ th·ªÉ.
ƒê√°p √°n ƒë√∫ng: B, E`;

  const sampleUnformattedText = `T√≠nh ƒë√†n h·ªìi c·ªßa AWS Cloud gi√∫p kh√°ch h√†ng ti·∫øt ki·ªám chi ph√≠ so v·ªõi c√°c nh√† cung c·∫•p d·ªãch v·ª• l∆∞u tr·ªØ truy·ªÅn th·ªëng. Kh√°ch h√†ng AWS c√≥ th·ªÉ l√†m g√¨ ƒë·ªÉ h∆∞·ªüng l·ª£i t·ª´ t√≠nh ƒë√†n h·ªìi c·ªßa AWS Cloud? (Ch·ªçn HAI)
Tri·ªÉn khai t√†i nguy√™n c·ªßa b·∫°n tr√™n nhi·ªÅu V√πng s·∫µn s√†ng.
S·ª≠ d·ª•ng Amazon EC2 Auto Scaling.
Tri·ªÉn khai t√†i nguy√™n c·ªßa b·∫°n trong m·ªôt khu v·ª±c kh√°c.
S·ª≠ d·ª•ng c√¢n b·∫±ng t·∫£i Elastic.
S·ª≠ d·ª•ng ƒêi·ªán to√°n phi m√°y ch·ªß (Serverless Computing) b·∫•t c·ª© khi n√†o c√≥ th·ªÉ.
c√¢u ƒë√∫ng: 2, 5`;

  return (
    <div className="quiz-input">
      <h2>T·∫°o Quiz t·ª´ Text</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group mode-selection">
          <label>Ch·ªçn ch·∫ø ƒë·ªô l√†m quiz:</label>
          <div className="mode-options">
            <label className="mode-option">
              <input
                type="radio"
                name="mode"
                value="test"
                checked={selectedMode === 'test'}
                onChange={(e) => setSelectedMode(e.target.value as QuizMode)}
              />
              <span className="mode-text">
                <strong>Ki·ªÉm tra</strong>
                {/* <small>Hi·ªÉn th·ªã k·∫øt qu·∫£ sau khi ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi</small> */}
              </span>
            </label>
            <label className="mode-option">
              <input
                type="radio"
                name="mode"
                value="practice"
                checked={selectedMode === 'practice'}
                onChange={(e) => setSelectedMode(e.target.value as QuizMode)}
              />
              <span className="mode-text">
                <strong>√în t·∫≠p</strong>
                {/* <small>Hi·ªÉn th·ªã ƒë√°p √°n ngay sau m·ªói c√¢u h·ªèi</small> */}
              </span>
            </label>
          </div>
        </div>

        <div className="form-group">
          <label htmlFor="quiz-text">
            Nh·∫≠p c√¢u h·ªèi theo format (m·ªói c√¢u h·ªèi c√≥ c√°c l·ª±a ch·ªçn A, B, C... v√† "ƒê√°p √°n ƒë√∫ng: X"):
            <br />
            {/* <small>üí° C√≥ th·ªÉ d√πng t√≠nh nƒÉng "Format Text" ƒë·ªÉ t·ª± ƒë·ªông format text ch∆∞a chu·∫©n b·∫±ng AI</small> */}
          </label>
          <textarea
            id="quiz-text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder={`V√≠ d·ª• text ƒë√£ chu·∫©n format:\n\n${sampleText}`}
            rows={15}
            cols={80}
            required
          />
        </div>
        <div className="form-actions">
          <button 
            type="button" 
            onClick={() => setInputText(sampleText)}
            className="sample-btn"
            disabled={isFormatting || isLoading}
          >
            V√≠ d·ª• chu·∫©n
          </button>
          {/* <button 
            type="button" 
            onClick={() => setInputText(sampleUnformattedText)}
            className="sample-btn demo-unformatted"
            disabled={isFormatting || isLoading}
          >
            V√≠ d·ª• ch∆∞a chu·∫©n
          </button> */}
          <button 
            type="button"
            onClick={handleFormatText}
            disabled={isFormatting || isLoading || !inputText.trim()}
            className="format-btn"
          >
            {isFormatting ? 'ƒêang format...' : 'Format Text'}
          </button>
          <button 
            type="submit" 
            disabled={isLoading || isFormatting || !inputText.trim()}
            className="create-btn"
          >
            {isLoading ? 'ƒêang t·∫°o quiz...' : 'T·∫°o Quiz'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default QuizInput; 